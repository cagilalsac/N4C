@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
@:#nullable disable

}
}
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using MediatR;
using N4C.Controllers;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Features." + Model.ControllerRootName);
    }
}

// Generated from N4C Template.

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;

    var queryRequestType = @Model.ModelTypeName + "QueryRequest";
    var createRequestType = @Model.ModelTypeName + "CreateRequest";
    var updateRequestType = @Model.ModelTypeName + "UpdateRequest";
    var deleteRequestType = @Model.ModelTypeName + "DeleteRequest";
}
    //[Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    public class @Model.ControllerName : ApiController
    {
        private readonly IMediator _mediator;

        public @(Model.ControllerName + "(IMediator mediator)")
        {
            _mediator = mediator;
        }

        // GET: @routePrefix
        [HttpGet]
        public async Task<IActionResult> Get()
        {
            return ActionResult(await _mediator.Send(new @(queryRequestType + "()")));
        }

        // GET: @routePrefix/5
        [HttpGet("{id}")]
        public async Task<IActionResult> Get(@primaryKeyShortTypeName id)
        {
            return ActionResult(await _mediator.Send(new @(queryRequestType + "()") { Id = id }), id);
        }

		// POST: @routePrefix
        [HttpPost]
        public async Task<IActionResult> Post(@createRequestType request)
        {
            request.Set(ModelState);
            return ActionResult(await _mediator.Send(request), request.Id);
        }

        // PUT: @routePrefix
        [HttpPut]
        public async Task<IActionResult> Put(@updateRequestType request)
        {
            request.Set(ModelState);
            return ActionResult(await _mediator.Send(request), request.Id);
        }

        // DELETE: @routePrefix/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(@primaryKeyShortTypeName id)
        {
            return ActionResult(await _mediator.Send(new @(deleteRequestType + "()") { Id = id }), id);
        }
	}
}