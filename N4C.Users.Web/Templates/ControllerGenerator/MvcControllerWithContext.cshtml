@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
@:#nullable disable
@:
}
}
@using System.Collections.Generic;
@using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.Authorization;
using N4C.Models;
using N4C.Services;
using N4C.Controllers;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Models");
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Domain");
    }
}

// Generated from N4C Template.

namespace @Model.ControllerNamespace
{
@{
    string routePrefix;
    if (String.IsNullOrEmpty(Model.AreaName))
    {
        routePrefix = Model.ControllerRootName;
    }
    else
    {
        routePrefix = Model.AreaName + "/" + Model.ControllerRootName;
    }
    var modelProperties = new List<string>();
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
        }
    }
    var bindString = string.Join(",", modelProperties);
    var contextTypeName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = Model.ModelVariable[0];
    var relatedProperties = new Dictionary<string, dynamic>();
    foreach (var nav in Model.ModelMetadata.Navigations)
    {
        relatedProperties.Add(nav.AssociationPropertyName, nav);

    }

    var inlineIncludes = "";
    foreach (var property in relatedProperties.Values)
    {
        inlineIncludes += string.Format("{0}                .Include({1} => {1}.{2})", Environment.NewLine, lambdaVar, property.AssociationPropertyName);
    }

    if (!string.IsNullOrEmpty(Model.AreaName))
    {
    @:@string.Format("[Area(\"{0}\")]", Model.AreaName)
    }

    var requestType = Model.ModelTypeName + "Request";
    var responseType = Model.ModelTypeName + "Response";
    var controllerAbstractType = "MvcController<" + Model.ModelTypeName + ", " + requestType + ", " + responseType + ">";
    var serviceAbstractType = "Service<" + Model.ModelTypeName + ", " + requestType + ", " + responseType + ">";
    var requestVariable = Model.ModelVariable + "Request";
    var serviceAbstractName = "service";
    var _serviceAbstractName = "Service";
}
    //[Authorize]
    public class @Model.ControllerName : @controllerAbstractType
    {
        // Service injections:
@foreach (var relatedProperty in relatedProperties.Keys)
{
        @:private readonly Service<@relatedProperty, @(relatedProperty + "Request"), @(relatedProperty + "Response")> _@(relatedProperty.Substring(0, 1).ToLower() + relatedProperty.Substring(1) + "Service");
}

        /* Can be uncommented and used for many to many relationships. Entity must be replaced with the related name in the controller and views. */
        //private readonly Service<{Entity}, {Entity}Request, {Entity}Response> _{Entity}Service;

        public @(Model.ControllerName + "(" + serviceAbstractType + " " + serviceAbstractName)
@foreach (var relatedProperty in relatedProperties.Keys)
{
            @:@(", Service<" + relatedProperty + ", " + relatedProperty + "Request, " + relatedProperty + "Response> " + relatedProperty.Substring(0, 1).ToLower() + relatedProperty.Substring(1) + "Service")
}

            /* Can be uncommented and used for many to many relationships. Entity must be replaced with the related name in the controller and views. */
            //, Service<{Entity}, {Entity}Request, {Entity}Response> {Entity}Service

            , IModelMetadataProvider modelMetadataProvider
        ) : base(@serviceAbstractName, modelMetadataProvider)
        {
@foreach (var relatedProperty in relatedProperties.Keys)
{
            @:@("_" + relatedProperty.Substring(0, 1).ToLower() + relatedProperty.Substring(1) + "Service = " + relatedProperty.Substring(0, 1).ToLower() + relatedProperty.Substring(1) + "Service");
}

            /* Can be uncommented and used for many to many relationships. Entity must be replaced with the related name in the controller and views. */
            //_{Entity}Service = {Entity}Service;

            Set(null);
        }

        protected override void Set(Action<ControllerConfig> config)
        {
            base.Set(config => 
            {
                config.SetModelStateErrors(true);

@{
                @:// Related items logic to set ViewData SelectLists (Id and Name parameters may need to be changed in the SelectList constructors):
    if (relatedProperties.Values.Any())
    {
        foreach (var property in relatedProperties.Values)
        {
                @:config.AddViewData("@(property.ForeignKeyPropertyNames[0])", new SelectList(_@(relatedProperties.FirstOrDefault(rp => rp.Value == property).Key.Substring(0, 1).ToLower() + relatedProperties.FirstOrDefault(rp => rp.Value == property).Key.Substring(1))Service.GetResponse().Result.Data, "Id", "Name"));
        }
    }
}  

                /* Can be uncommented and used for many to many relationships. Entity must be replaced with the related name in the controller and views. */
                //config.AddViewData("{Entity}Ids", new MultiSelectList(_{Entity}Service.GetResponse().Result.Data, "Id", "Name"));
            });
        }

        // GET: @routePrefix
        //[AllowAnonymous]
        public async Task<IActionResult> Index()
        {
            // Get collection logic:
            var result = await @(_serviceAbstractName).GetResponse();
            
            return View(result);
        }

        // GET: @routePrefix/Details/5
        public async Task<IActionResult> Details(@primaryKeyShortTypeName id)
        {
            // Get item logic:
            var result = await @(_serviceAbstractName).GetResponse(id);

            return View(result);
        }

        // GET: @routePrefix/Create
        public async Task<IActionResult> Create()
        {
            // Get item for create logic:
            var result = await @(_serviceAbstractName).GetRequest();
            
            SetViewData();
            return View(result);
        }

        // POST: @routePrefix/Create
        [HttpPost, ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(@requestType @requestVariable)
        {
            @(requestVariable).Set(ModelState);

@{
            @:// Insert item logic:
            @:var result = await @(_serviceAbstractName).Create(@requestVariable);
            @:
            @:if (result.Success)
}  
                return RedirectToAction(nameof(Details), new { id = result.Data.Id });
            SetViewData();
            return View(result);
        }

        // GET: @routePrefix/Edit/5
        public async Task<IActionResult> Edit(@primaryKeyShortTypeName id)
        {
            // Get item for edit logic:
            var result = await @(_serviceAbstractName).GetRequest(id);

            SetViewData();
            return View(result);
        }

        // POST: @routePrefix/Edit
        [HttpPost, ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(@requestType @requestVariable)
        {
            @(requestVariable).Set(ModelState);

@{
            @:// Update item logic:
            @:var result = await @(_serviceAbstractName).Update(@requestVariable);
            @:
            @:if (result.Success)
}  
                return RedirectToAction(nameof(Details), new { id = result.Data.Id });
            SetViewData();
            return View(result);
        }

        // GET: @routePrefix/Delete/5
        [HttpGet, Route("[controller]/[action]/{id}")]
        public async Task<IActionResult> Delete(@primaryKeyShortTypeName id)
        {
            // Get item for delete logic:
            var result = await @(_serviceAbstractName).GetResponse(id);

            return View(result);
        }

        // POST: @routePrefix/Delete
        [HttpPost, ValidateAntiForgeryToken]
        public async Task<IActionResult> Delete(@requestType @requestVariable)
        {
            // Delete item logic:
            var result = await @(_serviceAbstractName).Delete(@requestVariable);

            SetTempData(result);
            return RedirectToAction(nameof(Index));
        }

        // GET: @routePrefix/DeleteByAlertify/5
        public async Task<IActionResult> DeleteByAlertify(@requestType @requestVariable)
        {
            // Delete item logic:
            var result = await @(_serviceAbstractName).Delete(@requestVariable);

            SetTempData(result);
            return RedirectToAction(nameof(Index));
        }
    }
}
@functions
{
    // This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
    // sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (!Microsoft.VisualStudio.Web.CodeGeneration.Templating.TypeUtilities.IsNullable(primaryKeyType) || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
}