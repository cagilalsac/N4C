@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
@:#nullable disable

}
}
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using N4C.Services;
using N4C.Controllers;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Models");
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Domain");
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Controllers");
    }
}

// Generated from N4C Template.

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;

    var requestType = Model.ModelTypeName + "Request";
    var responseType = Model.ModelTypeName + "Response";
    var controllerAbstractType = "ApiController<" + Model.ModelTypeName + ", " + requestType + ", " + responseType + ">";
    if (Model.ModelTypeName == "N4CUser")
        controllerAbstractType = "N4CUserApiController";
    var serviceAbstractType = "Service<" + Model.ModelTypeName + ", " + requestType + ", " + responseType + ">";
    var serviceAbstractName = "service";
    var _serviceAbstractName = "Service";
}
    //[Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme, Roles = "system,admin,user")]
    public class @Model.ControllerName : @controllerAbstractType
    {
        public @(Model.ControllerName + "(" + serviceAbstractType + " " + serviceAbstractName + ")") : base(@serviceAbstractName)
        {
        }

        // GET: @routePrefix
        public override async Task<IActionResult> Get(string pageNumber, string recordsPerPageCount, string orderExpression, string culture = default)
        {
            Set(culture);
            return ActionResult(await @(_serviceAbstractName).GetResponse(await Service.GetResponse(pageNumber, recordsPerPageCount, orderExpression)));
        }

        // GET: @routePrefix/5
        public override async Task<IActionResult> Get(@primaryKeyShortTypeName id, string culture)
        {
            Set(culture);
            return ActionResult(await @(_serviceAbstractName).GetResponse(id));
        }

		// POST: @routePrefix
        public override async Task<IActionResult> Post([FromForm] @requestType request, string culture)
        {
            Set(culture);
            return ActionResult(await @(_serviceAbstractName).Create(request, ModelState));
        }

        // PUT: @routePrefix
        public override async Task<IActionResult> Put([FromForm] @requestType request, string culture)
        {
            Set(culture);
            return ActionResult(await @(_serviceAbstractName).Update(request, ModelState));
        }

        // DELETE: @routePrefix/5
        public override async Task<IActionResult> Delete(@primaryKeyShortTypeName id, string culture)
        {
            Set(culture);
            return ActionResult(await @(_serviceAbstractName).Delete(id));
        }
	}
}